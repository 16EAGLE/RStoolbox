% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/rasterPCA.R
\name{rasterPCA}
\alias{rasterPCA}
\title{Principal Component Analysis for Rasters}
\usage{
rasterPCA(img, nSamples = NULL, nComp = nlayers(img), maskCheck = TRUE,
  ...)
}
\arguments{
\item{img}{RasterBrick or RasterStack.}

\item{nSamples}{integer or NULL. Number of pixels to sample for PCA fitting. If NULL, all pixels will be used.}

\item{nComp}{integer. Number of PCA components to return.}

\item{maskCheck}{logical. Masks all pixels which have at least one NA (default TRUE is reccomended but introduces a slowdown, see Details when it is wise to disable maskCheck).
Takes effect only if nSamples is NULL.}

\item{...}{further arguments to be passed to \link[raster]{writeRaster}, e.g. filename.}
}
\value{
RasterBrick
}
\description{
Calculates R-mode PCA for RasterBricks or RasterStacks and returns a RasterBrick with multiple layers of PCA scores.
}
\details{
Internally rasterPCA relies on the use of \link[stats]{princomp} (R-mode PCA). If nSamples is given the PCA will be calculated
based on a random sample of pixels and the predicted for the full raster. If nSamples is NULL then the covariance matrix will be calculated
first and will then be used to calculate princomp and predict the full raster. The latter is more precise, since it considers all pixels,
however, it may be slower than calculating the PCA only on a subset of pixels.

Pixels with missing values in one or more bands will be set to NA. The built in check for such pixels can lead to a slow-down of rasterPCA.
However, if you make sure or know beforehand that all pixels have either only valid values or only NAs throughout all layers you can disable this check
by setting maskCheck=FALSE which speeds up the computation.
}
\examples{
input <- brick(system.file("external/rlogo.grd", package="raster"))

## Plot
olpar <- par(no.readonly = TRUE) # back-up par
par(mfrow=c(1,2))
plotRGB(input)

## Run classification
set.seed(25)
rpc <- rasterPCA(input)
rpc
summary(rpc$model)

## Plots
plotRGB(rpc$map, stretch="lin")

par(olpar) # reset par
}

